<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>setup</name>
  </assembly>
  <members>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.CloseConnection(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Use this function to close connection to the MCRTVSA application.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.Destroy(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase)">
      <summary>Use this function to destroy connection to MCRTVSA application. Use this function only after closing the connection.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.GetConnConfigFromINI(System.String,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.UInt16@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@,System.String@)">
      <summary>Gets the TCP port from INI file located in C:\ProgramData\RADX LibertyGT\Apps folder.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.GetConnectionConfig(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.UInt16@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@,System.String@)">
      <summary>Returns current IP address and TCP port used for connection to the application. Default IP Address is 127.0.0.1</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.OpenConnection(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Use this function to open connection reference to the MCRTVSA application. Use it after creating connection reference.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.SetConnectionConfig(System.UInt16,System.String,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Sets IP address and TCP port used for connection to the MCRTVSA application. Default IP Address is 127.0.0.1. Default TCP Port is 50212.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.TurnOff(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase)">
      <summary>Turns off application (exits and closes connection).</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.TurnOn(RemoteAccessAPI.Screen,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@,System.Boolean@,System.String@)">
      <summary>Use this function to Turn On the MCRTVSA application. It starts the application, creates connection and opens connection reference. Set Screen to 0 if you want to run application on main screen, or set it to 1 if you want to run application on auxilary screen. Returns Status = TRUE if application is initialized and active.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessBase.Create(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.SystemSetupLib.SystemSetup.Create(RemoteAccessAPI.SystemSetupLib+SystemSetup,RemoteAccessAPI.SystemSetupLib+SystemSetup@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.SystemSetupLib.SystemSetup.GetSysUsageInfo(RemoteAccessAPI.SystemSetupLib+SystemSetup,RemoteAccessAPI.SystemSetupLib+SystemSetup@,System.String[,]@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.SystemSetupLib.FileManagement.GetOutputFile(RemoteAccessAPI.SystemSetupLib+SystemSetup,RemoteAccessAPI.SystemSetupLib+SystemSetup@,System.String@)">
      <summary>Returns output capture file name with full absolute path to the file.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.SystemSetupLib.FileManagement.SetOutputFile(RemoteAccessAPI.SystemSetupLib+SystemSetup,System.String,RemoteAccessAPI.SystemSetupLib+SystemSetup@)">
      <summary>Sets output capture file name with full absolute path to the file.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessCommon.LoadContext(System.String,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Sets the MCRTVSA application to previously saved settings. Input string contains full path to XML file that contains previously saved context. Example path: C:\ProgramData\RADX LibertyGT\MCRTVSA_context_2016-11-07-143010.xml </summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessCommon.SaveContext(System.String,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Saves current MCRTVSA application settings to an XML file. Input string contains full path to the XML file which will be created. Example path: C:\ProgramData\RADX LibertyGT\MCRTVSA_context_2016-11-07-143010.xml.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessCommon.SetDefault(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.CoercedCmd[*]@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Sets the MCRTVSA application to default settings.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessCommon.SetExit(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Exits the MCRTVSA application.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessCommon.SetScreen(RemoteAccessAPI.Screen,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary>Brings the MCRTVSA application to focus on selected display. Screen selection: 0 - Main, 1 - Aux.</summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessTrace.Get2DTrace(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.Double[,]@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessTrace.GetChannelTrace(System.UInt16,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.Double[*]@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessTrace.GetChannelTraceLength(System.UInt16,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.UInt16@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessTrace.GetTrace(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.Double[*]@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
    <member name="M:RemoteAccessAPI.RemoteAccessAPILib.RemoteAccessTrace.GetTraceLength(RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase,System.UInt16@,RemoteAccessAPI.RemoteAccessAPILib+RemoteAccessBase@)">
      <summary></summary>
      <returns>Void</returns>
    </member>
  </members>
</doc>